{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["GITHUB_URL","App","state","user","active","componentDidMount","event","fetch","then","response","json","githubInfo","_this","setState","console","log","catch","err","concat","clickButton","prevState","react_default","a","createElement","className","lib","floating","large","onClick","this","horizontal","header","image","avatar_url","actions","href","blog","target","name","login","public_repos","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kRAIMA,EAAa,8CAmDJC,6MAhDbC,MAAQ,CACNC,KAAM,GACNC,QAAQ,KAGVC,kBAAoB,SAAAC,GAClBC,MAAMP,GACHQ,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJC,EAAKC,SAAS,CAACV,KAAMQ,IACrBG,QAAQC,IAAI,CAACJ,iBAEdK,MAAM,SAAAC,GAAG,OAAIH,QAAQC,IAAR,GAAAG,OAAeD,EAAf,4BAGlBE,YAAc,SAAAb,GACZM,EAAKC,SAAS,SAAAO,GAAS,MAAK,CAC1BhB,QAASgB,EAAUhB,mFAKrB,OACEiB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACE,EAAA,UAAD,KACEJ,EAAAC,EAAAC,cAACE,EAAA,OAAD,CAAQC,UAAQ,EAACC,OAAK,EAACH,UAAU,gCAAgCI,QAASC,KAAKV,aAA/E,cACCU,KAAK3B,MAAME,OACViB,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAACE,EAAA,KAAD,CACEK,YAAU,EACVC,OAAQV,EAAAC,EAAAC,cAACE,EAAA,UAAD,CAAWO,MAAOH,KAAK3B,MAAMC,KAAK8B,aAC1CC,QAAS,CAACb,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,uBAAH,IAAqBF,EAAAC,EAAAC,cAAA,KAAGY,KAAMN,KAAK3B,MAAMC,KAAKiC,KAAMC,OAAO,UAAUR,KAAK3B,MAAMC,KAAKiC,SAE/Ff,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,kBAAH,IAAiBM,KAAK3B,MAAMC,KAAKmC,MACjCjB,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,sBAAH,IAAqBM,KAAK3B,MAAMC,KAAKoC,OACrClB,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,iCAAH,IAAgCM,KAAK3B,MAAMC,KAAKqC,gBAGlD,cAzCIC,aCNEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCANC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SDyG3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9C,KAAK,SAAA+C,GACjCA,EAAaC","file":"static/js/main.5d42c440.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport {Button, Card, CardTitle, Container} from 'react-materialize';\n\nconst GITHUB_URL = \"https://api.github.com/users/StealthMcCloud\";\n\nclass App extends Component {\n  state = {\n    user: {},\n    active: false\n  };\n\n  componentDidMount = event => {\n    fetch(GITHUB_URL)\n      .then(response => response.json())\n      .then(githubInfo => {\n        this.setState({user: githubInfo})\n        console.log({githubInfo})\n      })\n      .catch(err => console.log(`${err} error error error`));\n  };\n  \n  clickButton = event => {\n    this.setState(prevState => ({\n      active: !prevState.active\n    }));\n  };\n\n  render() {\n    return (\n      <div className=\"main\">\n        <br />\n        <Container>\n          <Button floating large className=\"orange waves-effect waves-red\" onClick={this.clickButton}>Click Here</Button>\n          {this.state.active ?\n            <div>\n              {/* <Button floating large className=\"orange btn-large waves-effect waves-red\" onClick={this.clickButton} icon=\"clear\"></Button>  --> if do this, put the above where null is with a + instead of :) */}\n              <Card \n                horizontal\n                header={<CardTitle image={this.state.user.avatar_url}/>}\n                actions={[<p><b>Portfolio:</b> <a href={this.state.user.blog} target=\"_blank\">{this.state.user.blog}</a></p>]}\n              >\n                <p><b>Name:</b> {this.state.user.name}</p>\n                <p><b>Username:</b> {this.state.user.login}</p>\n                <p><b>Public Repositories:</b> {this.state.user.public_repos}</p>\n              </Card>\n            </div>\n            : null}\n          {/* could also do this.state.active && ... and leave off the : null */}\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config);\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}